#!/bin/bash

read -a appneta_url <<< $appURL
instance_count="${#appneta_url[@]}"
read -a calc_version <<<$1
read -a calc_version_granularity <<<$2
read -a calc_value <<< $3
read -a calc_agg_window <<< $4

curl -s -o /data/influx/orgs.json -X GET -H "Content-type: application/json" -H "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" 'http://influxdb:8086/api/v2/orgs'
curl -s -o /data/influx/tasks.json -X GET -H "Content-type: application/json" -H "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" 'http://influxdb:8086/api/v2/tasks'

influx_org_id=($( jq -r '.orgs[].id' /data/influx/orgs.json))
influx_org_name=($( jq -r '.orgs[].name' /data/influx/orgs.json))
existing_tasks=($(jq '.tasks[].name' /data/influx/tasks.json)) && existing_tasks=("${existing_tasks[@]//\"/}")

for ((m=0; m<$instance_count; m++))
  do
    temp_data=$(cat /data/webApp_all_"$m".json)
    temp_webAppTarget=($( jq -r '.[].webUrlTarget' <<< "$temp_data"))
    temp_webAppTarget=($(printf "%s\n" "${temp_webAppTarget[@]}" | sort -u ))
    temp_webAppTagValue=($( jq -r '.[].web_tag_value' <<< "$temp_data"))
    temp_webAppTagValue=($(printf "%s\n" "${temp_webAppTagValue[@]}" | sort -u | tr -d null))
    temp_webAppName=($( jq -r '.[].appName' <<< "$temp_data"))
    temp_webAppName=($(printf "%s\n" "${temp_webAppName[@]}" | sort -u ))

    if [[ " ${calc_version} " == " url " && " ${temp_webAppName[@]} " =~ "${calc_value}" ]]; then
      calc_version_value=($( jq -r '.[] | select(.appName | contains ("'$calc_value'")) | .webUrlTarget' <<< "$temp_data"))
    elif [[ " ${calc_version} " == " tag " && " ${temp_webAppName[@]} " =~ "${calc_value}" ]]; then
      calc_version_value=($( jq -r '.[] | select(.appName | contains ("'$calc_value'")) | .web_tag_value' <<< "$temp_data"))
    else
      calc_version_value=0
    fi

    if [[ " ${calc_version} " == " url " && " ${temp_webAppTarget[@]} " =~ "${calc_version_value}" ]]; then
      if [[  " ${calc_version_granularity} " =~ " milestone " ]]; then #url with milestone
            if [[ ! " ${existing_tasks[@]} " =~ " app_'${calc_value}'_url_${calc_version_value}_${calc_agg_window}m_${calc_version_granularity} " ]]; then
            curl -s -o /data/influx/tasktemp.json -X 'POST' \
              "http://influxdb:8086/api/v2/tasks" \
              --header "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" \
              --header 'Content-Type: application/json' \
              --data-raw '{
                    "orgID" : "'$influx_org_id'",
                    "org" : "bsr",
                    "flux":"option task = {name: \"app_'$calc_value'_url_'$calc_version_value'_'$calc_agg_window'm_'$calc_version_granularity'\", every: '$calc_agg_window'm}\n\nbucket = \"bsr_final_'$calc_agg_window'm\"\npath = \"'$calc_version_value'\"\nwebApp =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"webUrlTarget\"] == path)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\npathStats =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"pathUrlTarget\"] == path)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nfinalBSR_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"finalBSR\": r._finalBSR}),\n)\n\nfinalADJ_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_adjBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_adjBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"adjBSR\": r._adjBSR}),\n)\n\nfinalBSR_network_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_network: r.networkTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_network\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_network\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"finalBSR_network\": r._finalBSR_network}),\n)\n\nfinalBSR_server_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_server: r.serverTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_server\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_server\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"finalBSR_server\": r._finalBSR_server}),\n)\n\nfinalBSR_browser_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_browser: r.browserTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_browser\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_browser\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"finalBSR_browser\": r._finalBSR_browser}),\n)\n\nfinalBSR_latency_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_latency: r.latency * 0.01}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_latency\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\"milestone\",\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_latency\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\"],\nfieldFn: (r) =\u003e ({\"finalBSR_latency\": r._finalBSR_latency}),\n)","every":"'$calc_agg_window'm"
                }'
              taskStatus=($( jq -r '.status' /data/influx/tasktemp.json))
              #echo $taskStatus
              if [[  " $taskStatus " =~ "active" ]]; then
                echo -e "\nTask for Business Service "$calc_value" created with name app_"$calc_value"_url_"$calc_version_value"_"$calc_agg_window"m_"$calc_version_granularity".\n"
              fi
              rm -f /data/influx/tasktemp.json
            else
              echo -e "\nTask for Business Service "$calc_value" was not created as a task named 'app_"$calc_value"_url_"$calc_version_value"_"$calc_agg_window"m"$calc_version_granularity"' already exists.\n"
            fi
            break 3
      else #url without milestone
            if [[ ! " ${existing_tasks[@]} " =~ " app_'${calc_value}'_url_${calc_version_value}_${calc_agg_window}m_${calc_version_granularity}" ]]; then
            curl -s -o /data/influx/tasktemp.json -X 'POST' \
              "http://influxdb:8086/api/v2/tasks" \
              --header "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" \
              --header 'Content-Type: application/json' \
              --data-raw '{
                    "orgID" : "'$influx_org_id'",
                    "org" : "bsr",
                    "flux":"option task = {name: \"app_'$calc_value'_url_'$calc_version_value'_'$calc_agg_window'm_'$calc_version_granularity'\", every: '$calc_agg_window'm}\n\nbucket = \"bsr_final_'$calc_agg_window'm\"\npath = \"'$calc_version_value'\"\nwebApp =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"webUrlTarget\"] == path)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\npathStats =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"pathUrlTarget\"] == path)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nfinalBSR_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"finalBSR\": r._finalBSR}),\n)\n\nfinalADJ_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_adjBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_adjBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"adjBSR\": r._adjBSR}),\n)\n\nfinalBSR_network_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_network: r.networkTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_network\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_network\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"finalBSR_network\": r._finalBSR_network}),\n)\n\nfinalBSR_server_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_server: r.serverTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_server\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_server\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"finalBSR_server\": r._finalBSR_server}),\n)\n\nfinalBSR_browser_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_browser: r.browserTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_browser\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_browser\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"finalBSR_browser\": r._finalBSR_browser}),\n)\n\nfinalBSR_latency_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_latency: r.latency * 0.01}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_latency\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\n\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_latency\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", ],\nfieldFn: (r) =\u003e ({\"finalBSR_latency\": r._finalBSR_latency}),\n)","every":"'$calc_agg_window'm"
                }'
              taskStatus=($( jq -r '.status' /data/influx/tasktemp.json))
              #echo $taskStatus
              if [[  " $taskStatus " =~ "active" ]]; then
                echo -e "\nTask for Business Service "$calc_value" created with name app_"$calc_value"_url_"$calc_version_value"_"$calc_agg_window"m_"$calc_version_granularity".\n"
              fi
              rm -f /data/influx/tasktemp.json
            else
              echo -e "\nTask for Business Service "$calc_value" was not created as a task named 'app_"$calc_value"_url_"$calc_version_value"_"$calc_agg_window"m_"$calc_version_granularity"' already exists.\n"
            fi
            break 3
      fi
    elif [[ " ${calc_version} " == " tag " && " ${temp_webAppTagValue[@]} " =~ "${calc_version_value}" ]]; then
      if [[ " ${calc_version_granularity} " =~ " milestone " ]]; then #tag with milestone
            if [[ ! " ${existing_tasks[@]} " =~ " tag_${calc_version_value}_${calc_agg_window}m_${calc_version_granularity} " ]]; then
            curl -s -o /data/influx/tasktemp.json -X 'POST' \
              "http://influxdb:8086/api/v2/tasks" \
              --header "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" \
              --header 'Content-Type: application/json' \
              --data-raw '{
                    "orgID" : "'$influx_org_id'",
                    "org" : "bsr",
                    "flux":"option task = {name: \"tag_'$calc_version_value'_'$calc_agg_window'm_'$calc_version_granularity'\", every: '$calc_agg_window'm}\n\nbucket = \"bsr_final_'$calc_agg_window'm\"\ntag = \"'$calc_version_value'\"\nwebApp =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"web_tag_value\"] == tag)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\npathStats =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"path_tag_value\"] == tag)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nfinalBSR_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR\": r._finalBSR}),\n)\n\nfinalADJ_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_adjBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_adjBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"adjBSR\": r._adjBSR}),\n)\n\nfinalBSR_network_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_network: r.networkTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_network\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_network\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_network\": r._finalBSR_network}),\n)\n\nfinalBSR_server_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_server: r.serverTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_server\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_server\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_server\": r._finalBSR_server}),\n)\n\nfinalBSR_browser_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_browser: r.browserTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_browser\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_browser\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_browser\": r._finalBSR_browser}),\n)\n\nfinalBSR_latency_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_latency: r.latency * 0.01}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_latency\",\n\"_time\",\n\"appName\",\n\"userFlowName\", \"milestone\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_latency\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"milestone\",\"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_latency\": r._finalBSR_latency}),\n)","every":"1m"
                }'
              taskStatus=($( jq -r '.status' /data/influx/tasktemp.json))
              #echo $taskStatus
              if [[  " $taskStatus " =~ "active" ]]; then
                echo -e "\nTask for Business Service "$calc_value" created with name tag_"$calc_version_value"_"$calc_agg_window"m_"$calc_version_granularity".\n"
              fi
              rm -f /data/influx/tasktemp.json
            else
              echo -e "\nTask for Business Service "$calc_value" was not created as a task named 'tag_"$calc_version_value"_"$calc_agg_window"m_milestone' already exists.\n"
            fi
            break 3
      else #tag without milestone
            if [[ ! " ${existing_tasks[@]} " =~ " tag_${calc_version_value}_${calc_agg_window}m_${calc_version_granularity} " ]]; then
            curl -s -o /data/influx/tasktemp.json -X 'POST' \
              "http://influxdb:8086/api/v2/tasks" \
              --header "Authorization: Token $DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" \
              --header 'Content-Type: application/json' \
              --data-raw '{
                    "orgID" : "'$influx_org_id'",
                    "org" : "bsr",
                    "flux":"option task = {name: \"tag_'$calc_version_value'_'$calc_agg_window'm_'$calc_version_granularity'\", every: '$calc_agg_window'm}\n\nbucket = \"bsr_final_'$calc_agg_window'm\"\ntag = \"'$calc_version_value'\"\nwebApp =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"web_tag_value\"] == tag)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\npathStats =\nfrom(bucket: \"bsr_bucket\")\n|\u003e range(start: -60m)\n|\u003e filter(fn: (r) =\u003e r[\"path_tag_value\"] == tag)\n|\u003e pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nfinalBSR_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR\": r._finalBSR}),\n)\n\nfinalADJ_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _appN_exp_BSR: (r.browserTiming + r.networkTiming + r.serverTiming) * 0.001}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_path_BSR: r.latency * 0.01}))\n|\u003e map(fn: (r) =\u003e ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))\n|\u003e map(\nfn: (r) =\u003e\n({r with _adjBSR:\nif r.webPathStatus == \"OK\" or r.totalBSR != 0.0 or r.pathStatus == \"OK\" then\nr._appN_total_BSR\nelse\n100.0,\n}),\n)\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR: 100.0 - r._adjBSR}))\n|\u003e keep(\ncolumns: [\n\"_adjBSR\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_adjBSR\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"adjBSR\": r._adjBSR}),\n)\n\nfinalBSR_network_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_network: r.networkTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_network\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_network\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_network\": r._finalBSR_network}),\n)\n\nfinalBSR_server_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_server: r.serverTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_server\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_server\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_server\": r._finalBSR_server}),\n)\n\nfinalBSR_browser_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_browser: r.browserTiming * 0.001}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_browser\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_browser\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_browser\": r._finalBSR_browser}),\n)\n\nfinalBSR_latency_table =\njoin(tables: {webApp: webApp, pathStats: pathStats}, on: [\"_time\"])\n|\u003e map(fn: (r) =\u003e ({r with _finalBSR_latency: r.latency * 0.01}))\n|\u003e keep(\ncolumns: [\n\"_finalBSR_latency\",\n\"_time\",\n\"appName\",\n\"userFlowName\",\"web_tag_value\"\n],\n)\n|\u003e aggregateWindow(every: task.every, column: \"_finalBSR_latency\", fn: mean)\n|\u003e to(\nbucket: bucket,\nmeasurementColumn: \"appName\",\ntagColumns: [\"pathName\", \"userFlowName\", \"web_tag_value\"],\nfieldFn: (r) =\u003e ({\"finalBSR_latency\": r._finalBSR_latency}),\n)","every":"1m"
                }'
              taskStatus=($( jq -r '.status' /data/influx/tasktemp.json))
              #echo $taskStatus
              if [[  " $taskStatus " =~ "active" ]]; then
                echo -e "\nTask for Business Service "$calc_value" created with name tag_"$calc_version_value"_"$calc_agg_window"m_"$calc_version_granularity".\n"
              fi
              rm -f /data/influx/tasktemp.json
            else
              echo -e "\nTask for Business Service "$calc_value" was not created as a task named 'tag_"$calc_version_value"_"$calc_agg_window"m"$calc_version_granularity"' already exists.\n"
            fi
            break 3
      fi
#    else
#      echo "Input not valid tag or URL"
    fi
  done