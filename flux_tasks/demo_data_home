option task = {name: "bsr", every: 1m}

raw_bucket = "bsr_bucket"
final_bucket = "bsr_final_1m"
path = "zoom.us"
webApp =
    from(bucket: raw_bucket)
        |> range(start: -60d)
        |> filter(fn: (r) => r["webUrlTarget"] == path)
        |> filter(
            fn: (r) =>
                r["_field"] == "browserTiming" or r["_field"] == "serverTiming" or r["_field"]
                    ==
                    "networkTiming" or r["_field"] == "totalTime" or r["_field"] == "totalTime",
        )
        |> group(columns: ["_field", "appName", "_time", "userFlowName"])
        |> mean()
        |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")

pathStats =
    from(bucket: raw_bucket)
        |> range(start: -60d)
        |> filter(fn: (r) => r["pathUrlTarget"] == path)
        |> filter(fn: (r) => r["_field"] == "dataLoss" or r["_field"] == "latency")
        |> group(columns: ["_field", "_time", "pathName"])
        |> mean()
        |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")

finalBSR_table =
    join(tables: {webApp: webApp, pathStats: pathStats}, on: ["_time"])
        |> map(fn: (r) => ({r with _finalBSR_browserTiming: r.browserTiming * .001}))
        |> map(fn: (r) => ({r with _finalBSR_serverTiming: r.serverTiming * .001}))
        |> map(fn: (r) => ({r with _finalBSR_networkTiming: r.networkTiming * .001}))
        |> map(fn: (r) => ({r with _finalBSR_latency: r.latency * .01}))
        |> map(fn: (r) => ({r with _finalBSR_dataLoss: r.dataLoss * 1.0}))
        |> map(
            fn: (r) =>
                ({r with _appN_exp_BSR:
                        r._finalBSR_browserTiming + r._finalBSR_networkTiming
                            +
                            r._finalBSR_serverTiming,
                }),
        )
        |> map(fn: (r) => ({r with _appN_path_BSR: r._finalBSR_latency + r._finalBSR_dataLoss}))
        |> map(fn: (r) => ({r with _appN_total_BSR: r._appN_exp_BSR + r._appN_path_BSR}))
        |> map(fn: (r) => ({r with _adjBSR: r._appN_total_BSR * 1.0}))
        |> map(fn: (r) => ({r with _finalBSR: 100.0 - r._adjBSR}))
        |> keep(
            columns: [
                "_finalBSR",
                "_time",
                "appName",
                "userFlowName",
                "_adjBSR",
                "_finalBSR_networkTiming",
                "_finalBSR_serverTiming",
                "_finalBSR_browserTiming",
                "_finalBSR_latency",
                "_finalBSR_dataLoss",
            ],
        )
        |> to(
            bucket: final_bucket,
            measurementColumn: "appName",
            tagColumns: ["pathName", "userFlowName"],
            fieldFn: (r) =>
                ({
                    "finalBSR": r._finalBSR,
                    "adjBSR": r._adjBSR,
                    "finalBSR_network": r._finalBSR_networkTiming,
                    "finalBSR_server": r._finalBSR_serverTiming,
                    "finalBSR_browser": r._finalBSR_browserTiming,
                    "finalBSR_latency": r._finalBSR_latency,
                    "finalBSR_dataLoss": r._finalBSR_dataLoss,
                }),
        )
